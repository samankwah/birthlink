rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check user role
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    // Helper function to check if user is registrar or admin
    function canCreateRegistration() {
      return isAuthenticated() && (getUserRole() == 'registrar' || getUserRole() == 'admin');
    }
    
    // Users collection - Enhanced security for production with self-registration support
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow users to create their own profile during registration
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.keys().hasAll(['email', 'role', 'profile', 'status']) &&
                       request.resource.data.role in ['admin', 'registrar', 'viewer'] &&
                       request.resource.data.email == request.auth.token.email;
      
      // Admins can read all user profiles (for user management)
      allow read: if isAdmin();
      
      // Admins can create and update user accounts
      allow create, update: if isAdmin() && 
                               request.resource.data.keys().hasAll(['email', 'role', 'profile', 'status']) &&
                               request.resource.data.role in ['admin', 'registrar', 'viewer'];
      
      // Only admins can delete (deactivate) users
      allow delete: if isAdmin();
    }
    
    // Birth registrations collection - Production-grade security
    match /registrations/{registrationId} {
      // Only registrars and admins can create registrations
      allow create: if canCreateRegistration() && 
                       request.resource.data.registrarInfo.registrarId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['childDetails', 'motherDetails', 'fatherDetails', 'registrarInfo']) &&
                       request.resource.data.childDetails.keys().hasAll(['firstName', 'lastName', 'dateOfBirth', 'gender']) &&
                       request.resource.data.motherDetails.keys().hasAll(['firstName', 'lastName', 'dateOfBirth']) &&
                       request.resource.data.fatherDetails.keys().hasAll(['firstName', 'lastName', 'dateOfBirth']);
      
      // Registrars can read their own registrations
      allow read: if isAuthenticated() && 
                     resource.data.registrarInfo.registrarId == request.auth.uid;
      
      // Registrars can update their own registrations (but not change ownership)
      allow update: if isAuthenticated() && 
                       resource.data.registrarInfo.registrarId == request.auth.uid &&
                       request.resource.data.registrarInfo.registrarId == request.auth.uid &&
                       request.resource.data.registrationNumber == resource.data.registrationNumber;
      
      // Admins can read all registrations (for monitoring and management)
      allow read: if isAdmin();
      
      // Admins can update any registration (for corrections and approvals)
      allow update: if isAdmin();
      
      // Only admins can delete registrations (in case of data errors)
      allow delete: if isAdmin();
    }
    
    // Sync queue collection - Enhanced for production sync reliability
    match /syncQueue/{queueId} {
      // Users can manage their own sync items
      allow read, write: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid &&
                            resource.data.operationType in ['create', 'update', 'delete'];
      
      // Admins can view all sync queue items (for monitoring)
      allow read: if isAdmin();
      
      // Admins can manage sync queue (for troubleshooting)
      allow update, delete: if isAdmin();
    }
    
    // User Settings collection - Personal preferences and configurations
    match /userSettings/{userId} {
      // Users can read/write their own settings
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      
      // Admins can read all user settings (for support and management)
      allow read: if isAdmin();
      
      // Admins can update user settings (for support)
      allow update: if isAdmin();
    }
    
    // System configuration - Production system management
    match /systemConfig/{configId} {
      // All authenticated users can read basic config
      allow read: if isAuthenticated();
      
      // Only admins can modify system configuration
      allow write: if isAdmin();
    }
    
    // Analytics and monitoring collection
    match /analytics/{analyticsId} {
      // Users can write their own analytics data
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      // Only admins can read analytics data
      allow read: if isAdmin();
    }
    
    // Feedback collection for continuous improvement
    match /feedback/{feedbackId} {
      // Authenticated users can submit feedback
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['rating', 'category', 'description', 'timestamp']);
      
      // Users can read their own feedback submissions
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admins can read all feedback for improvement
      allow read: if isAdmin();
    }
    
    // Audit logs for security and compliance
    match /auditLogs/{logId} {
      // System can create audit logs (via Cloud Functions)
      allow create: if false; // Only Cloud Functions should create audit logs
      
      // Only admins can read audit logs
      allow read: if isAdmin();
    }
    
    // Regional statistics for reporting
    match /regionalStats/{regionId} {
      // System updates stats (via Cloud Functions)
      allow create, update: if false; // Only Cloud Functions should update stats
      
      // Authenticated users can read regional stats for their region
      allow read: if isAuthenticated();
      
      // Admins can read all regional statistics
      allow read: if isAdmin();
    }
    
    // Certificate counters for generating sequential certificate numbers
    match /certificateCounters/{district} {
      // Registrars and admins can read and update certificate counters
      allow read, create, update: if canCreateRegistration();
      
      // Admins can delete counters if needed
      allow delete: if isAdmin();
    }
    
    // Entry counters for registrar tracking
    match /entryCounters/{registrarId} {
      // Registrars can read and update their own entry counters
      allow read, create, update: if isAuthenticated() && request.auth.uid == registrarId;
      
      // Admins can read and manage all entry counters
      allow read, create, update, delete: if isAdmin();
    }
  }
}